{% extends 'rf_analyzer/base.html' %}

{% block title %}Upload CSV - RF Analyzer{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">üìä Upload CSV File</h4>
            </div>
            <div class="card-body">
                <p class="text-muted">
                    Upload a consolidated CSV file (e.g., Bellagio_POC_Rx.csv) to analyze RF S-parameter data.
                </p>

                <form method="post" enctype="multipart/form-data">
                    {% csrf_token %}

                    <!-- Session Name -->
                    <div class="mb-3">
                        <label for="{{ form.session_name.id_for_label }}" class="form-label">
                            {{ form.session_name.label }}
                        </label>
                        {{ form.session_name }}
                        {% if form.session_name.errors %}
                            <div class="invalid-feedback d-block">
                                {{ form.session_name.errors }}
                            </div>
                        {% endif %}
                    </div>

                    <!-- Description -->
                    <div class="mb-3">
                        <label for="{{ form.description.id_for_label }}" class="form-label">
                            {{ form.description.label }}
                        </label>
                        {{ form.description }}
                        {% if form.description.errors %}
                            <div class="invalid-feedback d-block">
                                {{ form.description.errors }}
                            </div>
                        {% endif %}
                    </div>

                    <!-- CSV File -->
                    <div class="mb-3">
                        <label for="{{ form.csv_file.id_for_label }}" class="form-label">
                            {{ form.csv_file.label }}
                        </label>
                        {{ form.csv_file }}
                        {% if form.csv_file.help_text %}
                            <div class="form-text">{{ form.csv_file.help_text }}</div>
                        {% endif %}
                        {% if form.csv_file.errors %}
                            <div class="invalid-feedback d-block">
                                {{ form.csv_file.errors }}
                            </div>
                        {% endif %}
                    </div>

                    <!-- Submit Button -->
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary btn-lg" id="uploadBtn">
                            üì§ Upload and Analyze
                        </button>
                        <div id="uploadProgress" class="progress" style="display: none; height: 30px;">
                            <div id="uploadProgressBar" class="progress-bar progress-bar-striped progress-bar-animated d-flex align-items-center justify-content-center" role="progressbar" style="width: 0%; height: 100%;">
                                <span id="uploadProgressText" style="font-weight: bold;">0%</span>
                            </div>
                        </div>
                        <small id="uploadStatus" class="text-muted" style="display: none; margin-top: 5px;"></small>
                    </div>
                </form>
            </div>
        </div>

        <!-- Recent Sessions -->
        {% if recent_sessions %}
        <div class="card mt-3">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h5 class="mb-0">üìÅ Recent Sessions ({{ recent_sessions|length }})</h5>
                    <div class="btn-group btn-group-sm" role="group">
                        <button type="button" class="btn btn-outline-secondary active" id="sortNewest" onclick="sortSessions('newest')">
                            ‚Üì Newest
                        </button>
                        <button type="button" class="btn btn-outline-secondary" id="sortOldest" onclick="sortSessions('oldest')">
                            ‚Üë Oldest
                        </button>
                        <button type="button" class="btn btn-outline-secondary" id="sortName" onclick="sortSessions('name')">
                            A-Z
                        </button>
                    </div>
                </div>
                <!-- Search bar -->
                <input type="text" class="form-control form-control-sm" id="sessionSearch"
                       placeholder="üîç Search sessions by name or description..."
                       onkeyup="filterSessions()">
            </div>
            <div class="list-group list-group-flush" id="sessionList">
                {% for session in recent_sessions %}
                <div class="list-group-item" data-created="{{ session.created_at|date:'c' }}" data-name="{{ session.name|lower }}">
                    <div class="d-flex w-100 justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <a href="{% url 'rf_analyzer:viewer' session.id %}" class="text-decoration-none">
                                <h6 class="mb-1">{{ session.name }}</h6>
                            </a>
                            {% if session.description %}
                                <p class="mb-1 text-muted small">{{ session.description|truncatewords:15 }}</p>
                            {% endif %}
                            <small class="text-muted">
                                <span class="badge bg-secondary">{{ session.data_points.count }} data points</span>
                                <span class="text-muted ms-2">{{ session.created_at|date:"Y-m-d H:i" }}</span>
                            </small>
                        </div>
                        <button class="btn btn-sm btn-outline-danger ms-3 delete-session-btn" 
                                onclick="deleteSession({{ session.id }}, '{{ session.name|escapejs }}'); return false;"
                                title="Delete session">
                            üóëÔ∏è
                        </button>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
        {% endif %}
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    // File input validation and preview
    const fileInput = document.querySelector('input[type="file"]');
    const uploadBtn = document.getElementById('uploadBtn');
    const uploadForm = fileInput.closest('form');

    fileInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (!file) return;

        const fileName = file.name;
        const fileSize = (file.size / (1024 * 1024)).toFixed(2);

        // Validate file type
        if (!fileName.toLowerCase().endsWith('.csv')) {
            alert('Please select a CSV file');
            fileInput.value = '';
            return;
        }

        // Validate file size (max 200MB)
        if (file.size > 200 * 1024 * 1024) {
            alert('File size must be less than 200MB');
            fileInput.value = '';
            return;
        }

        console.log(`Selected: ${fileName} (${fileSize} MB)`);
    });

    // Show loading state on form submit with XMLHttpRequest for progress tracking
    uploadForm.addEventListener('submit', function(e) {
        e.preventDefault(); // Prevent default form submission

        if (!fileInput.files[0]) {
            alert('Please select a CSV file');
            return;
        }

        // UI updates
        uploadBtn.disabled = true;
        uploadBtn.innerHTML = '‚è≥ Uploading...';
        document.getElementById('uploadProgress').style.display = 'block';
        document.getElementById('uploadStatus').style.display = 'block';

        // Disable all delete buttons during upload to prevent interference
        const deleteButtons = document.querySelectorAll('.delete-session-btn');
        deleteButtons.forEach(btn => {
            btn.disabled = true;
            btn.style.opacity = '0.5';
            btn.title = 'Cannot delete during upload';
        });

        // Prepare form data
        const formData = new FormData(uploadForm);
        const file = fileInput.files[0];
        const fileSize = (file.size / (1024 * 1024)).toFixed(2);

        // Create XMLHttpRequest for progress tracking
        const xhr = new XMLHttpRequest();

        // Upload progress event
        xhr.upload.addEventListener('progress', function(e) {
            if (e.lengthComputable) {
                const percentComplete = Math.round((e.loaded / e.total) * 100);
                const uploadedMB = (e.loaded / (1024 * 1024)).toFixed(2);
                const totalMB = (e.total / (1024 * 1024)).toFixed(2);

                // Update progress bar
                document.getElementById('uploadProgressBar').style.width = percentComplete + '%';
                document.getElementById('uploadProgressText').textContent = percentComplete + '%';
                document.getElementById('uploadStatus').textContent = `Uploading: ${uploadedMB} MB / ${totalMB} MB`;
            }
        });

        // Upload complete - now parsing
        xhr.upload.addEventListener('load', function() {
            document.getElementById('uploadProgressBar').style.width = '100%';
            document.getElementById('uploadProgressText').textContent = '100%';
            document.getElementById('uploadStatus').textContent = 'Upload complete! Parsing CSV data...';
            uploadBtn.innerHTML = '‚è≥ Parsing CSV...';
        });

        // Request complete - redirect or show error
        xhr.addEventListener('load', function() {
            if (xhr.status === 200) {
                // Parse JSON response
                try {
                    const response = JSON.parse(xhr.responseText);
                    if (response.success && response.redirect_url) {
                        document.getElementById('uploadStatus').textContent = 'Processing complete! Redirecting...';
                        setTimeout(() => {
                            window.location.href = response.redirect_url;
                        }, 500);
                    } else {
                        throw new Error('Invalid response format');
                    }
                } catch (error) {
                    alert('Upload succeeded but failed to redirect: ' + error.message);
                    window.location.reload();
                }
            } else {
                // Error occurred
                alert('Upload failed: ' + xhr.statusText);
                uploadBtn.disabled = false;
                uploadBtn.innerHTML = 'üì§ Upload and Analyze';
                document.getElementById('uploadProgress').style.display = 'none';
                document.getElementById('uploadStatus').style.display = 'none';

                // Re-enable delete buttons
                deleteButtons.forEach(btn => {
                    btn.disabled = false;
                    btn.style.opacity = '1';
                    btn.title = 'Delete session';
                });
            }
        });

        // Error handling
        xhr.addEventListener('error', function() {
            alert('Upload failed due to network error');
            uploadBtn.disabled = false;
            uploadBtn.innerHTML = 'üì§ Upload and Analyze';
            document.getElementById('uploadProgress').style.display = 'none';
            document.getElementById('uploadStatus').style.display = 'none';

            // Re-enable delete buttons
            deleteButtons.forEach(btn => {
                btn.disabled = false;
                btn.style.opacity = '1';
                btn.title = 'Delete session';
            });
        });

        // Send request
        xhr.open('POST', uploadForm.action);
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        xhr.send(formData);
    });

    // Delete session function
    function deleteSession(sessionId, sessionName) {
        if (!confirm(`Are you sure you want to delete session "${sessionName}"?\n\nThis will delete all associated data and cannot be undone.`)) {
            return;
        }

        fetch(`/rf-analyzer/session/delete/${sessionId}/`, {
            method: 'POST',
            headers: {
                'X-CSRFToken': '{{ csrf_token }}'
            }
        })
        .then(response => {
            if (response.ok) {
                // Reload page to update session list
                window.location.reload();
            } else {
                alert('Failed to delete session');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to delete session');
        });
    }

    // Sort sessions
    function sortSessions(sortType) {
        const sessionList = document.getElementById('sessionList');
        const sessions = Array.from(sessionList.children);

        sessions.sort((a, b) => {
            if (sortType === 'newest') {
                // Sort by data-created attribute (newest first)
                const dateA = a.getAttribute('data-created') || '';
                const dateB = b.getAttribute('data-created') || '';
                return dateB.localeCompare(dateA);
            } else if (sortType === 'oldest') {
                // Sort by data-created attribute (oldest first)
                const dateA = a.getAttribute('data-created') || '';
                const dateB = b.getAttribute('data-created') || '';
                return dateA.localeCompare(dateB);
            } else if (sortType === 'name') {
                // Sort by data-name attribute (A-Z)
                const nameA = a.getAttribute('data-name') || '';
                const nameB = b.getAttribute('data-name') || '';
                return nameA.localeCompare(nameB);
            }
            return 0;
        });

        // Clear and re-append sorted sessions
        sessionList.innerHTML = '';
        sessions.forEach(session => sessionList.appendChild(session));

        // Update button active states
        document.getElementById('sortNewest').classList.toggle('active', sortType === 'newest');
        document.getElementById('sortOldest').classList.toggle('active', sortType === 'oldest');
        document.getElementById('sortName').classList.toggle('active', sortType === 'name');
    }

    // Filter sessions by search
    function filterSessions() {
        const searchInput = document.getElementById('sessionSearch');
        const searchTerm = searchInput.value.toLowerCase().trim();
        const sessionList = document.getElementById('sessionList');
        const sessions = Array.from(sessionList.children);

        let visibleCount = 0;

        sessions.forEach(session => {
            const name = session.querySelector('h6').textContent.toLowerCase();
            const description = session.querySelector('.text-muted.small')?.textContent.toLowerCase() || '';

            const matches = name.includes(searchTerm) || description.includes(searchTerm);

            if (matches || searchTerm === '') {
                session.style.display = '';
                visibleCount++;
            } else {
                session.style.display = 'none';
            }
        });

        // Optional: Show "no results" message
        let noResultsMsg = document.getElementById('noResultsMsg');
        if (visibleCount === 0 && searchTerm !== '') {
            if (!noResultsMsg) {
                noResultsMsg = document.createElement('div');
                noResultsMsg.id = 'noResultsMsg';
                noResultsMsg.className = 'list-group-item text-center text-muted';
                noResultsMsg.innerHTML = '<em>No sessions found matching your search</em>';
                sessionList.appendChild(noResultsMsg);
            }
        } else if (noResultsMsg) {
            noResultsMsg.remove();
        }
    }
</script>
{% endblock %}
