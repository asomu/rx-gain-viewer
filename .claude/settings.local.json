{
  "permissions": {
    "allow": [
      "Bash(C:/Project/html_exporter/.venv/Scripts/python.exe -c \"import time; time.sleep(2); from pathlib import Path; p = Path(''prototype/utils/chart_generator.py''); c = p.read_text(encoding=''utf-8''); c = c.replace(''title_text=\"\"Avg Gain (dB)\"\" if j == 1 and i == middle_row else \"\"\"\"'', ''title_text=\"\"Avg Gain (dB)\"\" if j == 1 else \"\"\"\"  # Show on all rows''); c = c.replace(''title_standoff=15,  # Reduced - no longer overlaps with RXOUT'', ''title_standoff=30,  # Increased spacing from RXOUT labels''); p.write_text(c, encoding=''utf-8''); print(''Updated'')\")",
      "Bash(C:/Project/html_exporter/.venv/Scripts/python.exe -c \"import time; time.sleep(2); from pathlib import Path; p = Path(''prototype/utils/chart_generator.py''); c = p.read_text(encoding=''utf-8''); c = c.replace(''TARGET_WIDTH = 1400'', ''TARGET_WIDTH = 1500  # Increased to accommodate larger left margin''); c = c.replace(''margin=dict(l=150, r=60, t=100, b=80)'', ''margin=dict(l=200, r=60, t=100, b=80)  # Increased left margin for RXOUT labels spacing''); p.write_text(c, encoding=''utf-8''); print(''Updated'')\")",
      "Bash(C:/Project/html_exporter/.venv/Scripts/python.exe -c \"import time; time.sleep(2); from pathlib import Path; p = Path(''prototype/utils/chart_generator.py''); c = p.read_text(encoding=''utf-8''); lines = c.split(''\\n''); new_lines = []; i = 0; \nwhile i < len(lines):\n    if ''title_standoff=30,  # Increased spacing from RXOUT labels'' in lines[i]:\n        new_lines.append(''                    title_side=\"\"right\"\",  # Move Y-axis title to right side (near tick labels)'')\n        new_lines.append(''                    title_standoff=5,  # Minimal spacing since no overlap with RXOUT'')\n        i += 1\n    else:\n        new_lines.append(lines[i])\n        i += 1\np.write_text(''\\n''.join(new_lines), encoding=''utf-8''); print(''Updated'')\")",
      "Bash(C:/Project/html_exporter/.venv/Scripts/python.exe -c \"import time; time.sleep(2); from pathlib import Path; p = Path(''prototype/utils/chart_generator.py''); c = p.read_text(encoding=''utf-8''); c = c.replace(''title_side=\"\"right\"\",  # Move Y-axis title to right side (near tick labels)\\n                    title_standoff=5,  # Minimal spacing since no overlap with RXOUT'', ''title_standoff=35,  # Increased spacing from RXOUT labels''); p.write_text(c, encoding=''utf-8''); print(''Updated'')\")",
      "Bash(C:/Project/html_exporter/.venv/Scripts/python.exe -c \"import time; time.sleep(2); from pathlib import Path; p = Path(''prototype/utils/chart_generator.py''); c = p.read_text(encoding=''utf-8''); c = c.replace(''annotation.update(x=-0.05, xanchor=\"\"right\"\", textangle=0)'', ''annotation.update(x=-0.12, xanchor=\"\"right\"\", textangle=0)  # Move further left to avoid Y-axis title overlap''); p.write_text(c, encoding=''utf-8''); print(''Updated'')\")",
      "Bash(C:/Project/html_exporter/.venv/Scripts/python.exe -c \"import time; time.sleep(2); from pathlib import Path; p = Path(''prototype/utils/chart_generator.py''); c = p.read_text(encoding=''utf-8''); c = c.replace(''annotation.update(x=-0.12, xanchor=\"\"right\"\", textangle=0)  # Move further left to avoid Y-axis title overlap'', ''annotation.update(x=-0.08, xanchor=\"\"right\"\", textangle=0)  # Adjusted position to avoid overlap''); p.write_text(c, encoding=''utf-8''); print(''Updated'')\")",
      "Bash(C:/Project/html_exporter/.venv/Scripts/python.exe -c \"import time; time.sleep(2); from pathlib import Path; p = Path(''prototype/utils/chart_generator.py''); c = p.read_text(encoding=''utf-8''); c = c.replace(''        # 데이터 추가\\n        for col_idx, ca_combo in enumerate(ca_combinations):\\n            for row_idx, rx_port in enumerate(rx_ports):\\n                cell_data = grid_data[ca_combo][rx_port]'', ''        # 데이터 추가\\n        for col_idx, ca_combo in enumerate(ca_combinations):\\n            for row_idx, rx_port in enumerate(rx_ports):\\n                # Check if data exists for this combination\\n                if ca_combo not in grid_data or rx_port not in grid_data[ca_combo]:\\n                    continue\\n\\n                cell_data = grid_data[ca_combo][rx_port]''); p.write_text(c, encoding=''utf-8''); print(''Updated'')\")",
      "Bash(C:/Project/html_exporter/.venv/Scripts/python.exe -c \"from pathlib import Path; import time; time.sleep(2); p = Path(''django_test/rf_analyzer/templates/rf_analyzer/viewer.html''); c = p.read_text(encoding=''utf-8''); c = c.replace(''width: 1920, height: 1200'', ''width: 2000, height: 1200''); p.write_text(c, encoding=''utf-8''); print(''Updated save button width from 1920 to 2000'')\")",
      "Bash(C:/Project/html_exporter/.venv/Scripts/python.exe -c \"\nfrom pathlib import Path\nimport time\ntime.sleep(2)\n\np = Path(''prototype/utils/chart_generator.py'')\ncontent = p.read_text(encoding=''utf-8'')\n\n# Find and replace the annotation update section\nold = ''''''        # Move RXOUT labels from right to left and make horizontal\n        for annotation in fig.layout.annotations:\n            # Row titles (RXOUT labels) have textangle=90\n            if hasattr(annotation, \"\"textangle\"\") and annotation.textangle == 90:\n                # Change to horizontal and move to left side\n                annotation.update(x=-0.08, xanchor=\"\"right\"\", textangle=0)  # Adjusted position to avoid overlap''''''\n\nnew = ''''''        # Move RXOUT labels from right to left and make horizontal\n        for annotation in fig.layout.annotations:\n            # Row titles (RXOUT labels) have textangle=90\n            if hasattr(annotation, \"\"textangle\"\") and annotation.textangle == 90:\n                # Change to horizontal, move to left side, and use paper coordinates for export\n                annotation.update(\n                    x=-0.08,\n                    xanchor=\"\"right\"\",\n                    textangle=0,\n                    xref=\"\"paper\"\"  # Use paper coordinates so labels are included in export\n                )''''''\n\ncontent = content.replace(old, new)\np.write_text(content, encoding=''utf-8'')\nprint(''✅ Updated annotation xref to paper coordinates'')\n\")",
      "Bash(C:/Project/html_exporter/.venv/Scripts/python.exe -c \"from pathlib import Path; import time; time.sleep(2); p = Path(''django_test/rf_analyzer/templates/rf_analyzer/viewer.html''); c = p.read_text(encoding=''utf-8''); c = c.replace(''width: 2000, height: 1200'', ''width: 1920, height: 1200''); p.write_text(c, encoding=''utf-8''); print(''Reverted save button width back to 1920'')\")",
      "Bash(C:/Project/html_exporter/.venv/Scripts/python.exe -c \"from pathlib import Path; import time; time.sleep(2); p = Path(''prototype/utils/chart_generator.py''); c = p.read_text(encoding=''utf-8''); old = ''''''                annotation.update(\\n                    x=-0.08,\\n                    xanchor=\"\"right\"\",\\n                    textangle=0,\\n                    xref=\"\"paper\"\"  # Use paper coordinates so labels are included in export\\n                )''''''; new = ''''''annotation.update(x=-0.08, xanchor=\"\"right\"\", textangle=0)  # Adjusted position to avoid overlap''''''; c = c.replace(old, new); p.write_text(c, encoding=''utf-8''); print(''Reverted annotation xref change'')\")",
      "Bash(C:/Project/html_exporter/.venv/Scripts/python.exe -c \"\nfrom pathlib import Path\nimport time\ntime.sleep(2)\n\np = Path(''prototype/utils/chart_generator.py'')\ncontent = p.read_text(encoding=''utf-8'')\n\n# 1. Y-axis title_standoff: 35 -> 15\ncontent = content.replace(\n    ''title_standoff=35,  # Increased spacing from RXOUT labels'',\n    ''title_standoff=15,  # Reduced spacing to make room for RXOUT labels in export''\n)\n\n# 2. RXOUT label position: x=-0.08 -> x=-0.04\ncontent = content.replace(\n    ''annotation.update(x=-0.08, xanchor=\"\"right\"\", textangle=0)  # Adjusted position to avoid overlap'',\n    ''annotation.update(x=-0.04, xanchor=\"\"right\"\", textangle=0)  # Moved closer to subplot for export''\n)\n\n# 3. Left margin: 200 -> 150\ncontent = content.replace(\n    ''margin=dict(l=200, r=60, t=100, b=80)  # Increased left margin for RXOUT labels spacing'',\n    ''margin=dict(l=150, r=60, t=100, b=80)  # Optimized left margin for export inclusion''\n)\n\np.write_text(content, encoding=''utf-8'')\nprint(''Updated: standoff 35->15, RXOUT x=-0.08->-0.04, margin l=200->150'')\n\")",
      "Bash(C:/Project/html_exporter/.venv/Scripts/python.exe manage.py runserver)",
      "Bash(C:/Project/html_exporter/.venv/Scripts/python.exe -c \"\nfrom pathlib import Path\nimport time\ntime.sleep(2)\n\np = Path(''prototype/utils/chart_generator.py'')\ncontent = p.read_text(encoding=''utf-8'')\n\n# Fix indentation: add 16 spaces before annotation.update\ncontent = content.replace(\n    ''annotation.update(x=-0.04, xanchor=\"\"right\"\", textangle=0)  # Moved closer to subplot for export'',\n    ''                annotation.update(x=-0.04, xanchor=\"\"right\"\", textangle=0)  # Moved closer to subplot for export''\n)\n\np.write_text(content, encoding=''utf-8'')\nprint(''Fixed indentation'')\n\")"
    ],
    "deny": [],
    "ask": []
  }
}
